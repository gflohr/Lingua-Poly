openapi: '3.0.2'
info:
  title: 'Lingua::Poly OpenAPI WebApp'
  version:  '1.0'
servers:
  - url: http://127.0.0.1:4200/api/lingua-poly-um/v1
    description: The development server
components:
  securitySchemes:
    cookieAuth:
      type: apiKey
      in: cookie
      name: id
  schemas:
    DefaultResponse:
      title: DefaultResponse
      description: Generic default response
      properties:
        errors:
          type: array
          items:
            properties:
              message:
                type: string
              path:
                type: string
            required:
            - message
            - path
      required:
      - errors
    User:
      title: User
      description: A user object is identified by its username, its email or both.
      properties:
        email:
          type: string
          minLength: 3
          example: john.doe@acme.com
        username:
          type: string
          minLength: 2
          example: JohnDoe
        sessionTTL:
          description: Number of seconds before session expires.
          type: number
          format: int64
          minimum: 0
          maximum: 18446744073709551615
          example: 7200
    UserDraft:
      title: UserDraft
      properties:
        email:
          type: string
          minLength: 3
          example: john.doe@acme.com
        password:
          type: string
          minLength: 1
          example: s3cr3t
      required:
      - email
      - password
      additionalProperties: false
    UserLogin:
      title: Data sent for login
      type: object
      properties:
        id:
          description: Username or email address.
          type: string
          minLength: 1
          example: lingua@example.com
        password:
          type: string
          minLength: 1
          example: s3cr3t
        persistant:
          description: Remember me?
          type: boolean
          example: true
      required:
      - id
      - password
      additionalProperties: false
    Token:
      title: Token
      properties:
        token:
          type: string
          example: abcdef
      required:
        - token
      additionalProperties: false
  requestBodies:
    CreateUserRequest:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/UserDraft"
    Token:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Token"
    LoginRequest:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/UserLogin'
tags:
  - name: users
    description: User management
paths:
  /login:
    post:
      tags:
      - users
      summary: Log in to the system
      x-mojo-to: 'user#login'
      operationId: userLogin
      requestBody:
        $ref: '#/components/requestBodies/LoginRequest'
      responses:
        200:
          description: Successful login
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DefaultResponse'
  /users:
    post:
      tags:
      - users
      summary: Create a new user
      x-mojo-to: 'user#create'
      operationId: usersPost
      requestBody:
        $ref: "#/components/requestBodies/CreateUserRequest"
      responses:
        201:
          description: User waiting for confirmation created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DefaultResponse'
  /profile:
    get:
      tags:
      - users
      summary: Get user profile
      x-mojo-to: 'user#profile'
      security:
      - cookieAuth: []
      responses:
        200:
          description: User profile
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DefaultResponse'
  /register:
    post:
      tags:
      - users
      summary: Confirm a registration
      x-mojo-to: 'user#confirmRegistration'
      operationId: register
      requestBody:
        $ref: '#/components/requestBodies/Token'
      responses:
        200:
          description: User activated after confirmation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DefaultResponse'
      
