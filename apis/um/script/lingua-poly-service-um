#! /usr/bin/env perl
#
# Lingua-Poly   Language Disassembling Library
# Copyright (C) 2018-2019 Guido Flohr <guido.flohr@cantanea.com>
#               All rights reserved
#
# This library is free software. It comes without any warranty, to
# the extent permitted by applicable law. You can redistribute it
# and/or modify it under the terms of the Do What the Fuck You Want
# to Public License, Version 2, as published by Sam Hocevar. See
# http://www.wtfpl.net/ for more details.

use  strict;

use Mojo::File 'curfile';
use lib curfile->dirname->sibling('lib')->to_string;

use Bread::Board;

use Lingua::Poly::API::UM::Util qw(empty);

my $basedir = curfile->dirname->dirname;

my $dev = container 'Dev' => as {
};

my $prod = container 'Prod' => as {
};

my $c = container App => ['Env'] => as {
	service WebApp => (
		class => 'Lingua::Poly::API::UM',
		lifecycle => 'Singleton',
		dependencies => {
			database => '/Storage/database',
			configuration => 'Configuration/provider',
			logger => { '/Logging/logger' => { realm => 'core' } },
			userService => '/User/user',
			sessionService => '/User/session',
			requestContextService => 'RequestContext',
			tokenService => 'Token',
		},
	);

	service RequestContext => (
		class => 'Lingua::Poly::API::UM::Service::RequestContext',
		lifecycle => 'Singleton',
		dependencies => {
			configuration => '/Configuration/provider',
			logger => { '/Logging/logger' => { realm => 'request' }},
		}
	);

	service Token => (
		class => 'Lingua::Poly::API::UM::Service::Token',
		lifecycle => 'Singleton',
		dependencies => {
			configuration => '/Configuration/provider',
			logger => { '/Logging/logger' => { realm => 'request' }},
			database => '/Storage/database',
		}
	);

	container Storage => as {
		service database => (
			class => 'Lingua::Poly::API::UM::Service::Database',
			lifecycle => 'Singleton',
			dependencies => {
				configuration => '/Configuration/provider',
				logger => { '/Logging/logger' => { realm => 'database' } },
				preparer => 'preparer'
			}
		);
		service preparer => (
			class => 'Lingua::Poly::API::UM::Service::Database::Preparer',
			lifecycle => 'Singleton',
			dependencies => {
				statements => 'statements',
				database => 'database',
				logger => { '/Logging/logger' => { realm => 'database' } },
			},
		);
		service statements =>  (
			class => 'Lingua::Poly::API::UM::Service::Database::Statements',
			lifecycle => 'Singleton',
		)
	};

	# FIXME! This should be a regular service.
	container Configuration => as {
		service config_file => $basedir . '/lingua-poly-service-um.yaml';
		service api_prefix => '/api/lingua-poly/um/v1';
		service provider => (
			class => 'Lingua::Poly::API::UM::Config',
			lifecycle => 'Singleton',
			dependencies => {
				filename => 'config_file',
				apiPrefix => 'api_prefix',
			}
		);
	};

	container User => as {
		service user => (
			class => 'Lingua::Poly::API::UM::Service::User',
			lifecycle => 'Singleton',
			dependencies => {
				database  => '/Storage/database',
				llogger => { '/Logging/logger' => { realm => 'user' } },
			}
		);
		service session => (
			class => 'Lingua::Poly::API::UM::Service::Session',
			lifecycle => 'Singleton',
			dependencies => {
				userService => 'user',
				database  => '/Storage/database',
				logger => { '/Logging/logger' => { realm => 'session' } },
				configuration => '/Configuration/provider',
			}
		);
	};

	container Logging => as {
		service 'logger' => (
			class => 'Lingua::Poly::API::UM::SmartLogger',
			parameters => {
				realm => { isa => 'Str' }
			}
		);
	}
};

my $env = do {
	if (empty $ARGV[0] || $ARGV[0] eq 'dev') {
		$ENV{LINGUA_POLY_UM_DEBUG} = 'all' if !exists $ENV{LINGUA_POLY_UM_DEBUG};
		$dev;
	} elsif ($ARGV[0] eq 'prod') {
		$prod;
	} else {
		die "Unknown environment '$ARGV[0]'";
	}
};

my $parametrized_component = $c->create(Env => $env);
my $app = $parametrized_component->resolve(service => 'WebApp');
$app->start;
