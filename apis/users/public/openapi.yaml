openapi: '3.0.2'
info:
  title: 'Lingua::Poly OpenAPI WebApp'
  version:  '1.0'
servers:
  - url: http://localhost:4200/api/lingua-poly/users/v1
    description: The development server
components:
  securitySchemes:
    cookieAuth:
      type: apiKey
      in: cookie
      name: id
  schemas:
    Empty:
      title: Empty
      description: Empty object
      type: string
      default: ''
      pattern: '^$'
    Problem:
      title: Problem
      description: RFC7807 problem
      properties:
        type:
          type: string
          format: uri
          description: >
            A URI reference (RFC3986) that identifies the
            problem type.  RFC7807 encourages that, when
            dereferenced, it provide human-readable documentation for the
            problem type (e.g., using HTML W3C.REC-html5-20141028).  When
            this member is not present, its value is assumed to be
            "about:blank".
          default: about:blank
          example: https://lingua-poly.cantanea.com/problem/users/weak-password
        title:
          type: string
          description: >
            A short, human-readable summary of the problem
            type.  It SHOULD NOT change from occurrence to occurrence of the
            problem, except for purposes of localization (e.g., using
            proactive content negotiation; see RFC7231, Section 3.4).
        status:
          type: number
          description: >
            The HTTP status code (RFC7231, Section 6)
            generated by the origin server for this occurrence of the problem.
        detail:
          type: string
          description: >
            A human-readable explanation specific to this
            occurrence of the problem.
        instance:
          type: string
          format: uri
          description: >
            A URI reference that identifies the specific
            occurrence of the problem.  It may or may not yield further
            information if dereferenced.
    Profile:
      title: Profile
      description: Public information about a user.
      properties:
        username:
          type: string
          description: How the user's  name gets displayed.
          example: JohnDoe
        homepage:
          type: string
          description: The user's web presence.
          example: http://www.example.com/
        description:
          type: string
          description: Mini bio or additional information
          example: Curious language enthusiast
      additionalProperties: false
    User:
      title: User
      description: A user object with private information included.
      allOf:
        - $ref: '#/components/schemas/Profile'
        - type: object
          properties:
            email:
              type: string
              description: The user's email address.
              minLength: 3
              example: john.doe@acme.com
          additionalProperties: false
    UserDraft:
      title: UserDraft
      properties:
        email:
          type: string
          minLength: 3
          example: john.doe@acme.com
        password:
          type: string
          minLength: 1
          example: s3cr3t
      required:
      - email
      - password
      additionalProperties: false
    UserLogin:
      title: Data sent for login
      type: object
      properties:
        id:
          description: Username or email address.
          type: string
          minLength: 1
          example: lingua@example.com
        password:
          type: string
          minLength: 1
          example: s3cr3t
        persistant:
          description: Remember me?
          type: boolean
          example: true
      required:
      - id
      - password
      additionalProperties: false
    Token:
      title: Token
      properties:
        token:
          type: string
          example: abcdef
      required:
        - token
      additionalProperties: false
    Config:
      title: Config
      properties:
        hasOAuthGoogle:
          type: boolean
          example: true
        hasOAuthFacebook:
          type: boolean
          example: false
      additionalProperties: false
    AuthorizationUrl:
      title: AuthorizationURL
      properties:
        href:
          type: string
          example: https://accounts.example.com/oauth/auth
      required:
      - href
      additionalProperties: false
    PasswordChange:
      title: PasswordChange
      description: Either the oldPassword or a reset token must be present.
      properties:
        oldPassword:
          type: string
          example: secret
        token:
          type: string
          example: abcd1234
        password:
          type: string
          example: s3cr3t
      required:
      - password
      additionalProperties: false
    PasswordReset:
      title: PasswordReset
      description: Send password reset instructions by email.
      properties:
        id:
          type: string
          example: user@example.com
      required:
      - id
      additionalProperties: false
  requestBodies:
    EmptyRequest:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Empty'
    CreateUserRequest:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/UserDraft"
    Token:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Token"
    LoginRequest:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/UserLogin'
    ProfileRequest:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Profile'
    PasswordChangeRequest:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/PasswordChange'
    PasswordResetRequest:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/PasswordReset'
tags:
  - name: users
    description: User management
paths:
  /config:
    get:
      tags:
      - core
      summary: Get dynamic configuration
      x-mojo-to: 'config#get'
      responses:
        200:
          description: Dynamic cofiguration
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Config'
  /login:
    post:
      tags:
      - users
      summary: Log in to the system
      x-mojo-to: 'user#login'
      operationId: userLogin
      requestBody:
        $ref: '#/components/requestBodies/LoginRequest'
      responses:
        200:
          description: Successful login
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
  /logout:
    post:
      tags:
      - users
      summary: Log out of the system
      x-mojo-to: 'user#logout'
      security:
      - cookieAuth: []
      operationId: userLogout
      responses:
        204:
          description: Successful logout
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/Empty'
  /users:
    post:
      tags:
      - users
      summary: Create a new user
      x-mojo-to: 'registration#createUser'
      operationId: usersPost
      requestBody:
        $ref: "#/components/requestBodies/CreateUserRequest"
      responses:
        201:
          description: User waiting for confirmation created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        400:
          description: Invalid input, e.g. password too weak
  /profile:
    get:
      tags:
      - users
      summary: Get user profile
      x-mojo-to: 'user#profile'
      security:
      - cookieAuth: []
      responses:
        200:
          description: User profile
          content:
            application/json:
              schema:
                # For convenience, this is a User not a Profile so that the
                # email address can be displayed in the profile form.
                $ref: '#/components/schemas/User'
    patch:
      tags:
      - users
      summary: Update user profile
      x-mojo-to: 'user#updateProfile'
      security:
      - cookieAuth: []
      requestBody:
        $ref: '#/components/requestBodies/ProfileRequest'
      responses:
        204:
          description: Profile updated successfully
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/Empty'
  /profile/{name}:
    get:
      tags:
      - users
      summary: Get public parts of foreign user profile
      x-mojo-to: 'user#get'
      security:
      - cookieAuth: []
      operationId: getUserByName
      parameters:
        - name: name
          in: path
          description: The username
          schema:
            type: string
          required: true
      responses:
         200:
           description: Another user
           content:
             application/json:
               schema:
                 $ref: '#/components/schemas/Profile'
  /password:
    patch:
      tags:
      - users
      summary: Change user password
      x-mojo-to: 'user#changePassword'
      security:
      - cookieAuth: []
      requestBody:
        $ref: '#/components/requestBodies/PasswordChangeRequest'
      responses:
        204:
          description: Password successfully changed.
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/Empty'
  /password/reset:
    post:
      tags:
      - users
      summary: Change user password with reset token
      x-mojo-to: 'user#changePasswordWithToken'
      parameters:
        - name: token
          in: path
          description: The reset token received by email
          schema:
            type: string
          required: true
      requestBody:
        $ref: '#/components/requestBodies/PasswordChangeRequest'
      responses:
        204:
          description: Password successfully changed
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/Empty'
        410:
          description: Token not found (expired?)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem'
  /password/requestReset:
    post:
      tags:
      - users
      summary: Reset your password
      x-mojo-to: 'user#resetPassword'
      requestBody:
        $ref: '#/components/requestBodies/PasswordResetRequest'
      responses:
        204:
          description: Request received.
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/Empty'
  /register:
    post:
      tags:
      - users
      summary: Confirm a registration
      x-mojo-to: 'registration#confirm'
      operationId: register
      requestBody:
        $ref: '#/components/requestBodies/Token'
      responses:
        200:
          description: User activated after confirmation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
  /oauth/facebook:
    get:
      tags:
      - oauth
      summary: Facebook OAuth Login Redirect URL
      x-mojo-to: 'oauth_facebook#redirect'
      parameters:
      - name: code
        in: query
        description: Code for access token
        schema:
          type: string
      - name: state
        in: query
        description: CSRF token
        schema:
          type: string
      responses:
        302:
          description: Redirect to the application
  /oauth/google:
    get:
      tags:
      - oauth
      summary: Google OpenID Connect Redirect URL
      x-mojo-to: 'oauth_google#redirect'
      parameters:
        - name: error
          in: query
          description: An error occured.
          schema:
            type: string
        - name: code
          in: query
          description: Code for access token.
          schema:
            type: string
        - name: client_id
          in: query
          description: The Google Client ID.
          schema:
            type: string
        - name: client_secret
          in: query
          description: The Google Client secret.
          schema:
            type: string
        - name: redirect_uri
          in: query
          description: The redirect URI used
          schema:
            type: string
        - name: grant_type
          in: query
          description: Always "authorization_code".
          schema:
            type: string
            enum: [authorization_code]
      responses:
        302:
          description: Redirect to application
  /oauth/{provider}/authorizationUrl:
    get:
      tags:
      - oauth
      summary: Get the authorzation URL of an OAuth provider
      x-mojo-to: 'oauth#authorizationUrl'
      parameters:
      - name: provider
        in: path
        description: The name of an OAuth provider (case-insensitive)
        example: google
        schema:
          type: string
        required: true
      responses:
        200:
          description: The authorization URL
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthorizationUrl'
        404:
          description: Invalid or unsupported provider
          content:
            application/json:
              schema:
                type: object
